{% extends 'base.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://unpkg.com/easymde/dist/easymde.min.css">
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
    <link href="https://unpkg.com/dropzone@5/dist/min/dropzone.min.css" rel="stylesheet" />
    <link href="https://unpkg.com/dropzone@5/dist/min/dropzone.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="{{ asset('css/template/create.css') }}">

{% endblock %}

{% block title %}Create Template{% endblock %}

{% block body %}
    <div class="container-fluid mt-5">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <h1 class="text-center mb-4">Create Template</h1>

                <form action="{{ path('template_create', {'id': userId }) }}" method="post" enctype="multipart/form-data">
                    <input type="hidden" name="_csrf_token" value="{{ csrf_token('form') }}">

                    <!-- Nav Tabs -->
                    <ul class="nav nav-tabs mb-3" id="templateTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="general-tab" data-bs-toggle="tab" data-bs-target="#general" type="button" role="tab">General Settings</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="questions-tab" data-bs-toggle="tab" data-bs-target="#questions" type="button" role="tab">Questions</button>
                        </li>
                    </ul>

                    <div class="tab-content" id="templateTabContent">
                        <!-- General Tab -->
                        <div class="tab-pane fade show active" id="general" role="tabpanel">
                            <!-- Title -->
                            <div class="mb-3">
                                <label for="title" class="form-label">Template Title</label>
                                <input type="text" class="form-control" id="title" name="title" placeholder="Enter the title of the template" required>
                            </div>

                            <!-- Description -->
                            <div class="mb-3">
                                <label for="description" class="form-label">Template Description</label>
                                <textarea id="description" name="description"></textarea>
                            </div>

                            <!-- Topic Dropdown -->
                            <div class="mb-3">
                                <label for="topic" class="form-label">Select Topic</label>
                                <select id="topic" name="topic_id" class="form-select">
                                    <option value="">Loading topics...</option>
                                </select>
                            </div>

                            <!-- Tags -->
                            <div class="mb-3">
                                <label for="tag-input" class="form-label">Tags</label>
                                <input type="text" id="tag-input" class="form-control" placeholder="Start typing to search tags...">
                                <div class="tag-list" id="tag-list"></div>
                                <input type="hidden" name="tags" id="tags-hidden">
                            </div>

                            <!-- Image Upload -->
                            <div class="mb-3">
                                <label class="form-label">Upload Image</label>
                                <div id="dropzone" class="dropzone border rounded bg-light p-3 text-center"></div>
                                <input type="file" name="image" id="image-input" hidden accept="image/*" />
                                <canvas id="resize-canvas" width="480" height="320" style="display:none;"></canvas>
                                <small class="text-muted">Optional image attachment for this template.</small>
                            </div>

                            <!-- Access -->
                            <div class="mb-3">
                                <label class="form-label">Access</label><br>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="access" id="access_public" value="public" checked>
                                    <label class="form-check-label" for="access_public">Public</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="access" id="access_private" value="private">
                                    <label class="form-check-label" for="access_private">Private (select users)</label>
                                </div>
                            </div>

                            <!-- User Selection Area -->
                            <div id="user-select-area" class="mb-3" style="display: none;">
                                <label for="user-search" class="form-label">Select Users</label>
                                <input type="text" class="form-control" id="user-search" placeholder="Start typing a name or email..." autocomplete="off">

                                <div class="d-flex justify-content-end mt-2">
                                    <label for="sort-select" class="form-label me-2">Sort by:</label>
                                    <select id="sort-select" class="form-select w-auto">
                                        <option value="name" selected>Name</option>
                                        <option value="email">Email</option>
                                    </select>
                                </div>
                                <div id="selected-users" class="mt-2"></div>
                                <input type="hidden" name="user_ids" id="user-ids">
                            </div>
                        </div>

                        <!-- Questions Tab -->
                        <div class="tab-pane fade" id="questions" role="tabpanel" aria-labelledby="questions-tab">
                            <h6 class="mt-3">Questions (Drag & Drop)</h6>
                            <div id="question-list" class="mb-3"></div>
                            <button type="button" id="add-question" class="btn btn-secondary btn-sm mb-3">+ Add Question</button>
                        </div>

                    </div>

                    <!-- Submit -->
                    <div class="text-center mt-4">
                        <button type="submit" class="btn btn-primary">Create Template</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
{% endblock %}


{% block javascripts %}
    {{ parent() }}

    <script src="https://unpkg.com/easymde/dist/easymde.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.3/min/dropzone.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>

    <script src="https://unpkg.com/pica@8.0.0/dist/pica.min.js"></script>


    {# EasyMDE Initialization #}
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            new EasyMDE({
                element: document.getElementById("description"),
                spellChecker: false,
                placeholder: "Enter the description in markdown...",
                status: false
            });
        });
    </script>

    {# Load topics from DB  #}
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Load Topics via AJAX
            fetch("{{ path('template_ajax_topics') }}")
                .then(response => response.json())
                .then(data => {
                    const topicSelect = document.getElementById("topic");
                    topicSelect.innerHTML = '<option value="">-- Select Topic --</option>';
                    data.forEach(topic => {
                        const option = document.createElement("option");
                        option.value = topic.id;
                        option.textContent = topic.name;
                        topicSelect.appendChild(option);
                    });
                })
                .catch(() => {
                    const topicSelect = document.getElementById("topic");
                    topicSelect.innerHTML = '<option value="">Failed to load topics</option>';
                });
        });
    </script>

    {# Handle Tags #}
    <script>
        $(document).ready(function () {
            const $tagInput = $('#tag-input');
            const $tagList = $('#tag-list');
            const $tagsHidden = $('#tags-hidden');

            let selectedTags = [];

            function renderTags() {
                $tagList.empty();
                selectedTags.forEach(function (tag) {
                    const $tagElem = $('<span class="tag-item"></span>').text(tag);
                    const $removeBtn = $('<span class="remove-tag">&times;</span>');
                    $removeBtn.on('click', function () {
                        selectedTags = selectedTags.filter(t => t !== tag);
                        renderTags();
                    });
                    $tagElem.append($removeBtn);
                    $tagList.append($tagElem);
                });
                $tagsHidden.val(selectedTags.join(','));
            }

            $tagInput.autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "{{ path('template_tag_search') }}",
                        dataType: 'json',
                        data: {
                            term: request.term
                        },
                        success: function (data) {
                            response(data.map(item => item.text));
                        },
                        error: function () {
                            console.error('Autocomplete AJAX failed');
                        }
                    });
                },
                select: function (event, ui) {
                    if (!selectedTags.includes(ui.item.value)) {
                        selectedTags.push(ui.item.value);
                        renderTags();
                    }
                    $tagInput.val('');
                    return false;
                },
                minLength: 1
            });

            $tagInput.on('keydown', function (e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    const val = $tagInput.val().trim();
                    if (val && !selectedTags.includes(val)) {
                        selectedTags.push(val);
                        renderTags();
                        $tagInput.val('');
                    }
                }
            });
        });
    </script>

    {# Image Resizing with Pica #}
    <script>
        Dropzone.autoDiscover = false;
        const dz = new Dropzone("#dropzone", {
            url: "#", autoProcessQueue: false, maxFiles: 1, clickable: true,
            acceptedFiles: "image/*", addRemoveLinks: true,
            init: function () {
                this.on("addedfile", file => {
                    if (file.resized) return;
                    resizeImage(file).then(resized => {
                        resized.resized = true;
                        dz.removeAllFiles(true);
                        dz.addFile(resized);
                        const dt = new DataTransfer();
                        dt.items.add(resized);
                        document.getElementById("image-input").files = dt.files;
                    });
                });
                this.on("removedfile", () => {
                    document.getElementById("image-input").value = "";
                });
            }
        });

        function resizeImage(file) {
            return new Promise((resolve, reject) => {
                const img = new Image();
                img.onload = async () => {
                    const canvas = document.getElementById("resize-canvas");
                    const buffer = document.createElement("canvas");
                    buffer.width = img.width;
                    buffer.height = img.height;
                    buffer.getContext("2d").drawImage(img, 0, 0);

                    await pica().resize(buffer, canvas);
                    canvas.toBlob(blob => {
                        resolve(new File([blob], file.name, { type: "image/jpeg" }));
                    }, "image/jpeg", 0.9);
                };
                img.onerror = reject;
                img.src = URL.createObjectURL(file);
            });
        }
    </script>



    {#  User auto complete #}
    <script>
        $(function () {
            const userSearch = $('#user-search');
            const selectedUsersDiv = $('#selected-users');
            const userIdsInput = $('#user-ids');
            const sortSelect = $('#sort-select');

            let selectedUsers = [];
            let currentSort = 'name';

            function renderUsers() {
                selectedUsers.sort((a, b) => {
                    return a[currentSort].toLowerCase().localeCompare(b[currentSort].toLowerCase());
                });

                selectedUsersDiv.empty();
                selectedUsers.forEach(user => {
                    const pill = $('<span class="user-pill"></span>').text(`${user.name} (${user.email})`);
                    const removeBtn = $('<span class="remove-user">&times;</span>');
                    removeBtn.on('click', () => {
                        selectedUsers = selectedUsers.filter(u => u.id !== user.id);
                        updateHiddenInput();
                        renderUsers();
                    });
                    pill.append(removeBtn);
                    selectedUsersDiv.append(pill);
                });

                updateHiddenInput();
            }

            function updateHiddenInput() {
                userIdsInput.val(selectedUsers.map(u => u.id).join(','));
            }

            userSearch.autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '{{ path("template_user_search") }}',
                        data: {
                            term: request.term,
                            sort: sortSelect.val()
                        },
                        success: function (data) {
                            response(data.map(user => ({
                                label: `${user.name} (${user.email})`,
                                value: user.label,
                                userData: user
                            })));
                        }
                    });
                },
                select: function (event, ui) {
                    const user = ui.item.userData;
                    if (!selectedUsers.some(u => u.id === user.id)) {
                        selectedUsers.push(user);
                        renderUsers();
                    }
                    userSearch.val('');
                    return false;
                },
                minLength: 1
            });

            sortSelect.on('change', function () {
                currentSort = $(this).val();
                renderUsers();
            });

            $('input[name="access"]').on('change', function () {
                if ($(this).val() === 'private') {
                    $('#user-select-area').show();
                } else {
                    $('#user-select-area').hide();
                    selectedUsers = [];
                    renderUsers();
                }
            });
        });
    </script>

    <script>
        const questionList = document.getElementById('question-list');
        let questionIndex = 0; // To keep indexes in sync for all questions

        // Initialize Sortable.js
        Sortable.create(questionList, {
            animation: 150,
            ghostClass: 'sortable-ghost'
        });

        // Add Question Button
        document.getElementById('add-question').addEventListener('click', () => {
            addQuestionRow('', '', '', 'Single_line_text', true);
        });

        // Function to Add a Question Row
        function addQuestionRow(id, title, description, type, showInTable) {
            const div = document.createElement('div');
            div.className = 'border rounded p-2 mb-2 bg-light';

            div.innerHTML = `
        <input type="hidden" name="question_id[${questionIndex}]" value="${id}">
        <input type="text" name="question_title[${questionIndex}]" class="form-control mb-1" placeholder="Title" value="${escapeHtml(title)}" required>
        <textarea name="question_description[${questionIndex}]" class="form-control mb-1" placeholder="Description">${escapeHtml(description)}</textarea>
        <select name="question_type[${questionIndex}]" class="form-select mb-1">
            <option value="Single_line_text" ${type === 'Single_line_text' ? 'selected' : ''}>Single line text</option>
            <option value="Text" ${type === 'Text' ? 'selected' : ''}>Text</option>
            <option value="Number" ${type === 'Number' ? 'selected' : ''}>Number</option>
            <option value="Checkbox" ${type === 'Checkbox' ? 'selected' : ''}>Checkbox</option>
        </select>

        <div class="form-check mb-1">
            <input type="hidden" name="question_show_in_table[${questionIndex}]" value="0">
            <input type="checkbox" name="question_show_in_table[${questionIndex}]" class="form-check-input" value="1" ${showInTable ? 'checked' : ''}>
            <label class="form-check-label">Show in Table</label>
        </div>

        <button type="button" class="btn btn-danger btn-sm remove-btn d-flex justify-content-center align-items-center" style="width: 38px; height: 38px;">
            <i class="bi bi-trash"></i>
        </button>
    `;

            questionList.appendChild(div);
            questionIndex++;
        }

        // Remove Button Handler
        questionList.addEventListener('click', function (e) {
            if (e.target.closest('.remove-btn')) {
                e.target.closest('.border').remove();
                // Optional: reindex inputs here if you want indexes to be continuous after deletion
            }
        });

        // Utility function to escape HTML to prevent injection
        function escapeHtml(text) {
            if (!text) return '';
            return text.replace(/[&<>"']/g, function(m) {
                switch (m) {
                    case '&': return '&amp;';
                    case '<': return '&lt;';
                    case '>': return '&gt;';
                    case '"': return '&quot;';
                    case "'": return '&#039;';
                    default: return m;
                }
            });
        }

    </script>

{% endblock %}
