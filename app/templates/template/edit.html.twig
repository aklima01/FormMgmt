{% extends 'base.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://unpkg.com/easymde/dist/easymde.min.css">
    <link href="https://unpkg.com/dropzone@5/dist/min/dropzone.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">

    <style>
        .tag-list {
            margin-top: 10px;
        }
        .tag-item {
            display: inline-block;
            background-color: #0d6efd;
            color: white;
            padding: 5px 10px;
            border-radius: 20px;
            margin: 3px;
        }
        .tag-item .remove-tag {
            margin-left: 8px;
            font-weight: bold;
            cursor: pointer;
        }
        .user-pill {
            display: inline-block;
            background-color: #0d6efd;
            color: #fff;
            padding: 5px 10px;
            border-radius: 20px;
            margin: 3px;
        }
        .user-pill .remove-user {
            margin-left: 8px;
            cursor: pointer;
            font-weight: bold;
        }
    </style>
{% endblock %}

{% block title %}Edit Template{% endblock %}

{% block body %}

    <div class="container mt-5">
        <h1 class="text-center mb-4">Edit Template</h1>

        {# Nav tabs #}
        <ul class="nav nav-tabs" id="templateTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="general-tab" data-bs-toggle="tab" data-bs-target="#general" type="button" role="tab" aria-controls="general" aria-selected="true">General Settings</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="questions-tab" data-bs-toggle="tab" data-bs-target="#questions" type="button" role="tab" aria-controls="questions" aria-selected="false">Questions</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="results-tab" data-bs-toggle="tab" data-bs-target="#results" type="button" role="tab" aria-controls="results" aria-selected="false">Results</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="aggregation-tab" data-bs-toggle="tab" data-bs-target="#aggregation" type="button" role="tab" aria-controls="aggregation" aria-selected="false">Aggregated Results</button>
            </li>
        </ul>

        <form action="{{ path('template_edit', {id: template.id}) }}" method="post" enctype="multipart/form-data" class="mt-3">

            <!-- CSRF Token -->
            <input type="hidden" name="_csrf_token" value="{{ csrf_token('form') }}">
            <input type="hidden" name="template_id" value="{{ template.id }}">

            <div class="tab-content" id="templateTabsContent">

                <!-- General Settings Tab -->
                <div class="tab-pane fade show active" id="general" role="tabpanel" aria-labelledby="general-tab">
                    <!-- Title Input -->
                    <div class="mb-3">
                        <label for="title" class="form-label">Template Title</label>
                        <input type="text" class="form-control" id="title" name="title" placeholder="Enter the title of the template" value="{{ template.title }}" required>
                    </div>

                    <!-- Description Input -->
                    <div class="mb-3">
                        <label for="description" class="form-label">Template Description</label>
                        <textarea id="description" name="description">{{ template.description }}</textarea>
                    </div>

                    <!-- Topic dropdown -->
                    <div class="mb-3">
                        <label for="topic" class="form-label">Select Topic</label>
                        <select id="topic" name="topic_id" class="form-select">
                            {% for topic in topics %}
                                <option value="{{ topic.id }}" {% if template.topic is defined and template.topic is not null and topic.id == template.topic.id %}selected{% endif %}>{{ topic.name }}</option>
                            {% endfor %}
                        </select>
                    </div>

                    <!-- Tags Input -->
                    <div class="mb-3">
                        <label for="tag-input" class="form-label">Tags</label>
                        <input type="text" id="tag-input" class="form-control" placeholder="Start typing to search tags...">
                        <div class="tag-list mt-2" id="tag-list"></div>
                        <input type="hidden" name="tags" id="tags-hidden">
                    </div>

                    {# Pass selected tags JSON to JS #}
                    <script>
                        const selectedTagsFromTwig = {{ selectedTagsJson|raw }};
                    </script>

                    <!-- Image Upload -->
                    <div class="mb-3">
                        <label class="form-label">Upload Image</label>
                        <div id="dropzone" class="dropzone border rounded bg-light p-3 text-center" style="cursor:pointer;">
                            {% if template.imageUrl %}
                                <img id="image-preview" src="{{ template.imageUrl }}" alt="Uploaded Image" style="max-width: 100%; max-height: 200px; object-fit: contain;"/>
                                <div><button type="button" id="remove-image" class="btn btn-sm btn-danger mt-2">Remove Image</button></div>
                            {% else %}
                                <p>Drag an image here or click to select</p>
                            {% endif %}
                        </div>
                        <input type="file" name="image" id="image-input" hidden accept="image/*" />
                        <small class="text-muted">Optional image attachment for this template.</small>
                    </div>

                    <!-- Access Control -->
                    <div class="mb-3">
                        <label class="form-label">Access</label><br>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="access" id="access_public" value="public" {% if template.access != 'private' %}checked{% endif %}>
                            <label class="form-check-label" for="access_public">Public</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="access" id="access_private" value="private" {% if template.access == 'private' %}checked{% endif %}>
                            <label class="form-check-label" for="access_private">Private (select users)</label>
                        </div>
                    </div>

                    <!-- User Selection Area -->
                    <div id="user-select-area" class="mb-3" style="display: {% if template.access == 'private' %}block{% else %}none{% endif %};">
                        <label for="user-search" class="form-label">Select Users</label>
                        <input type="text" class="form-control" id="user-search" placeholder="Start typing a name or email..." autocomplete="off">

                        <div class="d-flex justify-content-end mt-2">
                            <label for="sort-select" class="form-label me-2">Sort by:</label>
                            <select id="sort-select" class="form-select w-auto">
                                <option value="name" selected>Name</option>
                                <option value="email">Email</option>
                            </select>
                        </div>
                        <div id="selected-users" class="mt-2"></div>
                        <input type="hidden" name="user_ids" id="user-ids">
                    </div>
                </div>

                <!-- Questions Tab -->
                <div class="tab-pane fade" id="questions" role="tabpanel" aria-labelledby="questions-tab">
                    <h6 class="mt-3">Questions (Drag & Drop)</h6>
                    <div id="question-list" class="mb-3"></div>
                    <button type="button" id="add-question" class="btn btn-secondary btn-sm mb-3">+ Add Question</button>
                </div>

                <!-- Results Tab -->
                <div class="tab-pane fade" id="results" role="tabpanel" aria-labelledby="results-tab">
                    <h5 class="mt-3">Filled Forms </h5>
                    <div class="table-responsive">
                        <table id="resultsTable" class="table table-hover align-middle">
                            <thead class="table-light">
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Date</th>
                                <th>Key Answers</th>

                            </tr>
                            </thead>
                            <tbody>

                            </tbody>
                        </table>
                    </div>

                </div>

                <!-- Aggregated Results Tab -->
                <div class="tab-pane fade" id="aggregation" role="tabpanel" aria-labelledby="aggregation-tab">
                    <div class="container mt-4">
                        <h4>Aggregated Results</h4>
                        <div id="aggregateResults" class="mt-3">
                            <div class="text-muted">Loading statistics...</div>
                        </div>
                    </div>

                </div>

            </div> <!-- /.tab-content -->

            <div class="text-center mt-3">
                <button type="submit" class="btn btn-primary">Update Template</button>
            </div>
        </form>

        <div class="text-center mt-3">
            <a href="{{ path('template_list') }}" class="btn btn-secondary">
                <i class="bi bi-x me-1"></i>Cancel
            </a>
        </div>

    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <script src="https://unpkg.com/easymde/dist/easymde.min.js"></script>

{#    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>#}

    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.3/min/dropzone.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>


    {# EasyMDE Initialization #}
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            new EasyMDE({
                element: document.getElementById("description"),
                spellChecker: false,
                placeholder: "Enter the description in markdown...",
                status: false
            });


        });



    </script>

    {# Tag Input with Autocomplete #}
    <script>
        $(document).ready(function () {
            const $tagInput = $('#tag-input');
            const $tagList = $('#tag-list');
            const $tagsHidden = $('#tags-hidden');

            let selectedTags = [];

            // Initialize preloaded tags
            if (typeof selectedTagsFromTwig !== 'undefined') {
                selectedTags = selectedTagsFromTwig;
                renderTags();
            }

            function renderTags() {
                $tagList.empty();
                selectedTags.forEach(function (tag) {
                    const $tagElem = $('<span class="badge bg-primary me-1 mb-1 tag-item"></span>').text(tag.name);
                    const $removeBtn = $('<span class="remove-tag ms-1" style="cursor:pointer;">&times;</span>');

                    $removeBtn.on('click', function () {
                        selectedTags = selectedTags.filter(t => t.name !== tag.name);
                        renderTags();
                    });

                    $tagElem.append($removeBtn);
                    $tagList.append($tagElem);
                });

                // Store all tag names (existing and new) as a comma-separated string
                const allTagNames = selectedTags.map(t => t.name);
                $tagsHidden.val(allTagNames.join(','));
            }

            $tagInput.autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "{{ path('template_tag_search') }}",
                        dataType: 'json',
                        data: { term: request.term },
                        success: function (data) {
                            // data = [{id: x, text: 'name'}, ...]
                            response(data.map(item => ({
                                label: item.text,
                                value: item.text,
                                id: item.id
                            })));
                        },
                        error: function () {
                            console.error('Autocomplete AJAX failed');
                        }
                    });
                },
                select: function (event, ui) {
                    if (!selectedTags.find(t => t.id === ui.item.id)) {
                        selectedTags.push({ id: ui.item.id, name: ui.item.value });
                        renderTags();
                    }
                    $tagInput.val('');
                    return false;
                },
                minLength: 1
            });

            $tagInput.on('keydown', function (e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    const val = $tagInput.val().trim();
                    if (val) {
                        if (!selectedTags.find(t => t.name.toLowerCase() === val.toLowerCase())) {
                            selectedTags.push({ id: 0, name: val }); // new tag, id=0
                            renderTags();
                        }
                        $tagInput.val('');
                    }
                }
            });
        });
    </script>


    {#Dropzone for Image Upload with resizing using pica#}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const dropzone = document.getElementById('dropzone');
            const fileInput = document.getElementById('image-input');

            dropzone.addEventListener('click', function () {
                fileInput.click();
            });

            fileInput.addEventListener('change', function (event) {
                const file = event.target.files[0];
                if (!file) return;


                const reader = new FileReader();
                reader.onload = function (e) {
                    let preview = document.getElementById('image-preview');
                    if (!preview) {
                        preview = document.createElement('img');
                        preview.id = 'image-preview';
                        preview.style.maxWidth = '100%';
                        preview.style.maxHeight = '200px';
                        preview.style.objectFit = 'contain';
                        dropzone.innerHTML = '';
                        dropzone.appendChild(preview);
                    }
                    preview.src = e.target.result;

                    // Add remove button if not exists
                    if (!document.getElementById('remove-image')) {
                        const removeBtn = document.createElement('button');
                        removeBtn.type = 'button';
                        removeBtn.id = 'remove-image';
                        removeBtn.className = 'btn btn-sm btn-danger mt-2';
                        removeBtn.textContent = 'Remove Image';
                        removeBtn.addEventListener('click', function (e) {
                            e.stopPropagation();
                            fileInput.value = '';
                            preview.remove();
                            removeBtn.remove();
                            dropzone.innerHTML = '<p>Drag an image here or click to select</p>';
                        });
                        dropzone.appendChild(document.createElement('div')).appendChild(removeBtn);
                    }
                };
                reader.readAsDataURL(file);
            });

            // Remove button event for existing image
            const removeExistingBtn = document.getElementById('remove-image');
            if (removeExistingBtn) {
                removeExistingBtn.addEventListener('click', function (e) {
                    e.stopPropagation();
                    fileInput.value = '';
                    const preview = document.getElementById('image-preview');
                    if (preview) preview.remove();
                    removeExistingBtn.remove();
                    dropzone.innerHTML = '<p>Drag an image here or click to select</p>';
                });
            }
        });
    </script>



    {# User Search and Selection #}
    <script>
        $(function () {
            const userSearch = $('#user-search');
            const selectedUsersDiv = $('#selected-users');
            const userIdsInput = $('#user-ids');
            const sortSelect = $('#sort-select');

            let selectedUsers = {{ selectedUsersJson|raw }};
            let currentSort = 'name';

            function renderUsers() {
                selectedUsers.sort((a, b) => {
                    return a[currentSort].toLowerCase().localeCompare(b[currentSort].toLowerCase());
                });

                selectedUsersDiv.empty();
                selectedUsers.forEach(user => {
                    const pill = $('<span class="user-pill badge bg-primary me-1 mb-1 p-2 rounded-pill"></span>').text(`${user.name} (${user.email})`);
                    const removeBtn = $('<span class="ms-2 text-white" style="cursor:pointer;">&times;</span>');
                    removeBtn.on('click', () => {
                        selectedUsers = selectedUsers.filter(u => u.id !== user.id);
                        updateHiddenInput();
                        renderUsers();
                    });
                    pill.append(removeBtn);
                    selectedUsersDiv.append(pill);
                });

                updateHiddenInput();
            }

            function updateHiddenInput() {
                userIdsInput.val(selectedUsers.map(u => u.id).join(','));
            }

            userSearch.autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '{{ path("template_user_search") }}',
                        data: {
                            term: request.term,
                            sort: sortSelect.val()
                        },
                        success: function (data) {
                            response(data.map(user => ({
                                label: `${user.name} (${user.email})`,
                                value: user.label,
                                userData: user
                            })));
                        }
                    });
                },
                select: function (event, ui) {
                    const user = ui.item.userData;
                    if (!selectedUsers.some(u => u.id === user.id)) {
                        selectedUsers.push(user);
                        renderUsers();
                    }
                    userSearch.val('');
                    return false;
                },
                minLength: 1
            });

            sortSelect.on('change', function () {
                currentSort = $(this).val();
                renderUsers();
            });

            $('input[name="access"]').on('change', function () {
                if ($(this).val() === 'private') {
                    $('#user-select-area').show();
                    renderUsers(); // redraw pills
                } else {
                    $('#user-select-area').hide();
                    selectedUsers = [];
                    renderUsers();
                }
            });

            // Initial show if template is private
            {% if template.access == 'private' %}
            $('#access_private').prop('checked', true);
            $('#user-select-area').show();
            renderUsers();
            {% endif %}
        });
    </script>

    {# Sortable.js for Questions #}
    <script>
        const questionList = document.getElementById('question-list');
        let questionIndex = 0; // To keep indexes in sync for all questions

        // Initialize Sortable.js
        Sortable.create(questionList, {
            animation: 150,
            ghostClass: 'sortable-ghost'
        });

        // Add Question Button
        document.getElementById('add-question').addEventListener('click', () => {
            addQuestionRow('', '', '', 'Single_line_text', true);
        });

        // Function to Add a Question Row
        function addQuestionRow(id, title, description, type, showInTable) {
            const div = document.createElement('div');
            div.className = 'border rounded p-2 mb-2 bg-light';

            div.innerHTML = `
        <input type="hidden" name="question_id[${questionIndex}]" value="${id}">
        <input type="text" name="question_title[${questionIndex}]" class="form-control mb-1" placeholder="Title" value="${escapeHtml(title)}" required>
        <textarea name="question_description[${questionIndex}]" class="form-control mb-1" placeholder="Description">${escapeHtml(description)}</textarea>
        <select name="question_type[${questionIndex}]" class="form-select mb-1">
            <option value="Single_line_text" ${type === 'Single_line_text' ? 'selected' : ''}>Single line text</option>
            <option value="Text" ${type === 'Text' ? 'selected' : ''}>Text</option>
            <option value="Number" ${type === 'Number' ? 'selected' : ''}>Number</option>
            <option value="Checkbox" ${type === 'Checkbox' ? 'selected' : ''}>Checkbox</option>
        </select>

        <div class="form-check mb-1">
            <input type="hidden" name="question_show_in_table[${questionIndex}]" value="0">
            <input type="checkbox" name="question_show_in_table[${questionIndex}]" class="form-check-input" value="1" ${showInTable ? 'checked' : ''}>
            <label class="form-check-label">Show in Table</label>
        </div>

        <button type="button" class="btn btn-danger btn-sm remove-btn d-flex justify-content-center align-items-center" style="width: 38px; height: 38px;">
            <i class="bi bi-trash"></i>
        </button>
    `;

            questionList.appendChild(div);
            questionIndex++;
        }

        // Remove Button Handler
        questionList.addEventListener('click', function (e) {
            if (e.target.closest('.remove-btn')) {
                e.target.closest('.border').remove();
                // Optional: reindex inputs here if you want indexes to be continuous after deletion
            }
        });

        // Utility function to escape HTML to prevent injection
        function escapeHtml(text) {
            if (!text) return '';
            return text.replace(/[&<>"']/g, function(m) {
                switch (m) {
                    case '&': return '&amp;';
                    case '<': return '&lt;';
                    case '>': return '&gt;';
                    case '"': return '&quot;';
                    case "'": return '&#039;';
                    default: return m;
                }
            });
        }

        // Load Questions from Server
        const templateQuestions = {{ template_questions_json|raw }};
        templateQuestions.forEach(q => {
            addQuestionRow(q.id, q.title, q.description, q.type, q.showInTable);
        });
    </script>

    <script>
        const templateId = {{ template.id | json_encode|raw  }};
        const userRoles = {{ app.user.roles|json_encode|raw }};
        console.log(userRoles);
    </script>

    {#Results table#}
    <script>
        $(document).ready(function () {
            const templateId = {{ template.id|json_encode|raw }};
            const userRoles = {{ app.user.roles|json_encode|raw }};
            const isAdmin = userRoles.includes('ROLE_ADMIN');

            const table = $('#resultsTable').DataTable({
                order : [[0, 'desc']],
                ajax: {
                    url: `/template/${templateId}/results/data`,
                    method: 'GET',
                    dataSrc: 'data'
                },
                columns: [
                    { data: 'id' },
                    { data: 'name' },
                    { data: 'email' },
                    { data: 'date' },
                    {
                        data: 'keyAnswers',
                        render: function (data, type, row) {
                            return data;
                        }
                    },
                    {
                        data: null,
                        orderable: false,
                        searchable: false,
                        visible: false,
                        render: function (data, type, row) {
                            return `
                            <div class="dropdown">
                                <button class="btn btn-sm btn-light" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="bi bi-three-dots"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="/template/${templateId}/results/view/${row.id}">View</a></li>
                                    <li><a class="dropdown-item" href="/form/${row.id}/edit">Edit</a></li>
                                    <li><a class="dropdown-item text-danger" href="#" onclick="deleteResult(${row.id}); return false;">Delete</a></li>
                                </ul>
                            </div>
                        `;
                        }
                    }
                ],
                createdRow: function (row, data) {
                    $(row).attr('data-href', isAdmin ? `/form/${data.id}/edit` : `/form/${data.id}/view`);
                    $(row).css('cursor', 'pointer');
                }
            });

        // Handle row click (excluding the dropdown column)
            // Handle row click (excluding the dropdown column)
            $('#resultsTable tbody').on('click', 'tr', function (e) {
                if ($(e.target).closest('.dropdown').length === 0) {
                    const rowData = table.row(this).data();
                    if (rowData && rowData.id) {
                        const url = isAdmin
                            ? `/form/${rowData.id}/edit`
                            : `/form/${rowData.id}/view`;
                        window.location.href = url;
                    }
                }
            });
        });
    </script>


    {#    Aggregated Results Script#}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const templateId = {{ template.id }}; // Replace with dynamic ID if needed
            $.get(`/template/${templateId}/aggregate`, function (data) {
                let html = '';
                if (data.length === 0) {
                    html = '<p class="text-warning">No answers submitted yet.</p>';
                } else {
                    html += '<ul class="list-group">';
                    data.forEach(item => {
                        html += `
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <div>
                                <strong>${item.question}</strong>
                                <br><small class="text-muted">${item.type}</small>
                            </div>
                            <span class="badge bg-info text-dark">${item.summary}</span>
                        </li>
                    `;
                    });
                    html += '</ul>';
                }
                $('#aggregateResults').html(html);
            }).fail(function () {
                $('#aggregateResults').html('<div class="text-danger">Failed to load aggregate data.</div>');
            });
        });
    </script>





{% endblock %}
